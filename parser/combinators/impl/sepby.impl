// Copyright (C) 2017 gahag
// All rights reserved.
//
// This software may be modified and distributed under the terms
// of the BSD license. See the LICENSE file for details.

#include <tpc/parser/base.hpp>
#include <tpc/parser/container.hpp>
#include <tpc/parser/combinators/join.hpp>
#include <tpc/parser/combinators/lexeme.hpp>
#include <tpc/parser/combinators/many.hpp>


namespace tpc {
  template<
    typename T, parser<T> sep,
    typename Container, parser< value_type<Container> > parse,
    typename
  >
  result<Container> sepBy1(stream& stream) {
    using vtype = value_type<Container>;
    
    auto first = lexeme<vtype, parse>(stream);
    
    if (first) {
      Container container;
      container.push_back(std::move(*first));
      
      return many< Container, second<T,     lexeme<T, sep>,
                                     vtype, lexeme<vtype, parse> > >(
        std::move(container),
        stream
      ).from(first);
    }
    else
      return result<Container>::fail(first);
  }
}
