// Copyright (C) 2017 gahag
// All rights reserved.
//
// This software may be modified and distributed under the terms
// of the BSD license. See the LICENSE file for details.

#include <tpc/parser/combinators/bind.hpp>
#include <tpc/parser/combinators/try.hpp>


namespace tpc {
  template<
    typename Keyword, Keyword keyword
  >
  constexpr inline result<Keyword> expected(const Keyword& k) {
    return keyword == k ? result<Keyword>(keyword)
                        : result<Keyword>::fail();
  }
  
  template<
    typename T, typename Keyword, Keyword keyword
  >
  constexpr inline result<T> expected(const T& k) {
    T _keyword(static_cast<T>(keyword));
    
    return _keyword == k ? result<T>(std::move(_keyword))
                         : result<T>::fail();
  }
  
  
  template<
    typename Keyword, Keyword keyword
                    , parser<Keyword> parse
  >
  constexpr inline result<Keyword> expect(stream& stream) {
    return bind< Keyword, parse,
                 Keyword, expected<Keyword, keyword> >(stream);
  }
  
  template<
    typename Keyword, Keyword keyword,
    typename T, parser<T> parse
  >
  constexpr inline result<T> expect(stream& stream) {
    return bind< T, parse,
                 T, expected<T, Keyword, keyword> >(stream);
  }
}
